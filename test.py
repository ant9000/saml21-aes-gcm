#!/usr/bin/env python3

from Crypto.Cipher import AES
import hexdump

aes_plain_text = bytes([
    0x31, 0x78, 0x36, 0x78, 0x31, 0x28, 0x93, 0x90, 0x21, 0x39, 0x07, 0x89,
    0x03, 0x71, 0x28, 0x93, 0x71, 0x28, 0x93, 0x78, 0x91, 0x27, 0x39, 0x81,
    0x27, 0x38, 0x97, 0x12, 0x98, 0x37, 0x91, 0x28, 0x73, 0x89, 0x12, 0x73,
    0x89, 0x07, 0x12, 0x89, 0x37, 0x12, 0x89, 0x03, 0x71, 0x28, 0x90, 0x73,
    0x89, 0x12, 0x73, 0x89, 0x01, 0x27, 0x38, 0x90, 0x71, 0x28, 0x90, 0x37,
    0x12, 0x89, 0x37, 0x89, 0x12, 0x73, 0x89, 0x01, 0x27, 0x38, 0x90, 0x12,
    0x73, 0x89, 0x12, 0x73, 0x89, 0x71, 0x28, 0x93])
aes_key = bytes([
    0x51, 0x25, 0x12, 0x75, 0x75, 0x21, 0x75, 0x25, 0x71, 0x26, 0x78, 0x67,
    0x18, 0x93, 0x79, 0x12])
nonce = bytes([
    0x88, 0x09, 0x80, 0x98, 0x90, 0x80, 0x80, 0x98, 0x09, 0x80, 0x09, 0x82])
auth_data = bytes([
    0x05, 0x39, 0x18, 0x63, 0x90, 0x11, 0x63, 0x78, 0x91, 0x57, 0x83, 0x11,
    0x89, 0x36, 0x93, 0x81])
aes_cipher_text = bytes([
    0x92, 0x7A, 0xBA, 0x21, 0x55, 0x57, 0x9E, 0x01, 0xD2, 0x52, 0x1C, 0x83,
    0x0D, 0xB1, 0xC3, 0x16, 0x63, 0xF8, 0x72, 0xE0, 0xAB, 0x3F, 0xEC, 0x1C,
    0xA6, 0x36, 0x57, 0xFE, 0xB6, 0xB1, 0xB3, 0x84, 0x0D, 0x75, 0x87, 0x1D,
    0x68, 0x3D, 0x38, 0xD5, 0xD2, 0x4B, 0xB5, 0xF1, 0x25, 0x85, 0x97, 0xF0,
    0x95, 0xED, 0x79, 0x0D, 0xFF, 0xE6, 0x6D, 0x05, 0xBA, 0x73, 0x9D, 0x85,
    0xE5, 0xC6, 0x9A, 0x33, 0xAA, 0x99, 0xCC, 0x02, 0xE3, 0x94, 0x14, 0xF2,
    0xF2, 0x0B, 0x0F, 0x92, 0x20, 0xF4, 0x30, 0x92])

cipher = AES.new(aes_key, AES.MODE_GCM, nonce=nonce)
cipher.update(auth_data)
aes_output, auth_tag = cipher.encrypt_and_digest(aes_plain_text)

print("ENCRYPT")
print("Plain text:")
hexdump.hexdump(aes_plain_text)
print("Cipher text:")
hexdump.hexdump(aes_output)

cipher = AES.new(aes_key, AES.MODE_GCM, nonce=nonce)
cipher.update(auth_data)
aes_output = cipher.decrypt_and_verify(aes_cipher_text, auth_tag)

print("DECRYPT")
print("Cipher text:")
hexdump.hexdump(aes_cipher_text)
print("Plain text:")
hexdump.hexdump(aes_output)

assert(aes_output == aes_plain_text)
